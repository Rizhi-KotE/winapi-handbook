package common.service.impl;

import common.exception.HandbookException;
import model.WinApiFunction;
import model.WinApiFunctionRequirement;
import model.WinApiParameter;
import model.WinApiUserElement;

import java.util.List;

public interface WinApiHandbookService {

    /**
     * Get all exists elements
     * @return
     * @throws HandbookException
     */
    List<WinApiUserElement> getAll() throws HandbookException;

    /**
     * Find class instance by id
     *
     * @param id class id
     * @return founded instance
     * @throws HandbookException if instance was not founded or else errors
     */
    WinApiUserElement getUserElement(long id) throws HandbookException;

    /**
     * Save class instance or update if class's id not equal 0
     *
     * @param winApiUserElement
     * @return return saved instance with all autogenerated fields
     * @throws HandbookException when element was not founded
     */
    WinApiUserElement saveOrUpdateUserElement(WinApiUserElement winApiUserElement) throws HandbookException;

    /**
     * Remove existence class and all nested instances
     *
     * @param id
     * @throws HandbookException when element was not founded
     */
    int removeElement(long id) throws HandbookException;

    /**
     * Create new function
     *
     * @param classId  - id of class which parameter added
     * @param function
     * @throws HandbookException
     */
    WinApiFunction createFunction(long classId, WinApiFunction function) throws HandbookException;

    /**
     * Update function
     *
     * @param function
     * @throws HandbookException when function was not founded
     */
    int updateFunction(WinApiFunction function) throws HandbookException;

    /**
     * Remove existence function and all nested instances
     *
     * @param id
     * @throws HandbookException when function was not founded
     */
    int removeWinApiFunction(long id) throws HandbookException;

    /**
     * create new parameter
     *
     * @param functionId - id of function which parameter added
     * @param parameter
     * @throws HandbookException
     */
    WinApiParameter createParam(long functionId, WinApiParameter parameter) throws HandbookException;

    /**
     * Update parameter
     *
     * @param parameter
     * @throws HandbookException when parameter was not founded
     */
    int updateParam(WinApiParameter parameter) throws HandbookException;

    /**
     * Remove existence parameter and all nested instances
     *
     * @param id
     * @throws HandbookException when parameter was not founded
     */
    int removeWinApiParameter(long id) throws HandbookException;

    /**
     * create new requirement
     *
     * @param functionId - id of function which requirement added
     * @param requirement
     * @throws HandbookException
     */
    WinApiFunctionRequirement createRequirement(long functionId, WinApiFunctionRequirement requirement) throws HandbookException;

    /**
     * Update requirement
     *
     * @param requirement
     * @throws HandbookException when requirement was not founded
     */
    int updateRequirement(WinApiFunctionRequirement requirement) throws HandbookException;

    /**
     * Remove requirement parameter and all nested instances
     *
     * @param id
     * @throws HandbookException when requirement was not founded
     */
    int removeRequirement(long id) throws HandbookException;
}
